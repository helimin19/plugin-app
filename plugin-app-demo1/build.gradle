apply plugin: 'com.android.application'
apply plugin: 'com.tencent.shadow.plugin'

//这段buildscript配置的dependencies是为了apply plugin: 'com.tencent.shadow.plugin'能找到实现
buildscript {
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            mavenCentral()
        }
        maven {
            name = "GitHubPackages"
            url "https://maven.pkg.github.com/tencent/shadow"
            //一个只读账号兼容Github Packages暂时不支持匿名下载
            //https://github.community/t/download-from-github-package-registry-without-authentication/14407
            credentials {
                username = 'readonlypat'
                password = '\u0067hp_s3VOOZnLf1bTyvHWblPfaessrVYyEU4JdNbs'
            }
        }
        mavenLocal()
    }

    dependencies {
        classpath "com.tencent.shadow.core:gradle-plugin:$shadow_version"
    }
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.hlm.plugin.app.demo1"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        debug {
            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }

    aaptOptions {
        additionalParameters "--package-id", "0x7E", "--allow-reserved-package-id"
    }

    flavorDimensions(*flavorDimensionList)

    // 将插件applicationId设置为和宿主相同
    productFlavors {
        plugin {
            applicationId "com.shenzhenmc.nocc"
        }
    }

}

dependencies {
    // Shadow Transform后业务代码会有一部分实际引用runtime中的类
    // 如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
    pluginCompileOnly "com.tencent.shadow.core:runtime:$shadow_version"

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

shadow {
    packagePlugin {
        pluginTypes {
            debug {
                loaderApkConfig = new Tuple2('plugin-app-loader-debug.apk', ':plugin-app-loader:assembleDebug')
                runtimeApkConfig = new Tuple2('plugin-app-runtime-debug.apk', ':plugin-app-runtime:assembleDebug')
                pluginApks {
                    pluginApk1 {
                        businessName = 'plugin-demo1'//businessName相同的插件，context获取的Dir是相同的。businessName留空，表示和宿主相同业务，直接使用宿主的Dir。
                        partKey = 'plugin-demo1'
                        buildTask = 'assemblePluginDebug'
                        apkPath = 'plugin-app-demo1/build/outputs/apk/plugin/debug/plugin-app-demo1-plugin-debug.apk'
                    }
                }
            }

            release {
                loaderApkConfig = new Tuple2('plugin-app-loader-release.apk', ':plugin-app-loader:assembleRelease')
                runtimeApkConfig = new Tuple2('plugin-app-runtime-release.apk', ':plugin-app-runtime:assembleRelease')
                pluginApks {
                    pluginApk1 {
                        businessName = 'plugin-demo1'
                        partKey = 'plugin-demo1'
                        buildTask = 'assemblePluginRelease'
                        apkPath = 'plugin-app-demo1/build/outputs/apk/plugin/release/plugin-app-demo1-plugin-release.apk'
                    }
                }
            }
        }

        loaderApkProjectPath = 'plugin-app-loader'

        runtimeApkProjectPath = 'plugin-app-runtime'

        uuid = '1234567890'
        version = 4
        compactVersion = [1, 2, 3]
        uuidNickName = "1.1.5"
    }
}


task genUUID()  {
    doFirst {
        def uuidFile = file(rootProject.projectDir.absolutePath + '/build/uuid.txt')
        uuidFile.getParentFile().mkdirs()
        BufferedWriter writer = new BufferedWriter(new FileWriter(uuidFile))
        writer.write(UUID.randomUUID().toString().toUpperCase())
        writer.flush()
        writer.close()
    }
}

task PackageMultiPlugin(dependsOn: ['genUUID', 'packageDebugPlugin', ':plugin-app-demo2:packagePlugin2DebugPlugin']) {
    doLast {
        file(rootProject.projectDir.absolutePath + '/build/uuid.txt').delete()
    }
}
