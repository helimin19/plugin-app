apply plugin: 'com.android.application'
apply plugin: 'com.tencent.shadow.plugin'

//这段buildscript配置的dependencies是为了apply plugin: 'com.tencent.shadow.plugin'能找到实现
buildscript {
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            mavenCentral()
        }
        maven {
            name = "GitHubPackages"
            url "https://maven.pkg.github.com/tencent/shadow"
            //一个只读账号兼容Github Packages暂时不支持匿名下载
            //https://github.community/t/download-from-github-package-registry-without-authentication/14407
            credentials {
                username = 'readonlypat'
                password = '\u0067hp_s3VOOZnLf1bTyvHWblPfaessrVYyEU4JdNbs'
            }
        }
        mavenLocal()
    }

    dependencies {
        classpath "com.tencent.shadow.core:gradle-plugin:$shadow_version"
    }
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.hlm.plugin.app.demo2"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'


            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    buildFeatures {
        viewBinding true
    }

    // 将插件的资源ID分区改为和宿主0x7F不同的值
    aaptOptions {
        additionalParameters "--package-id", "0x7E", "--allow-reserved-package-id"
    }

    flavorDimensions(*flavorDimensionList)

    // 将插件applicationId设置为和宿主相同
    productFlavors {
        plugin {
            applicationId "com.hlm.plugin.host"
        }
    }

}

dependencies {
    // Shadow Transform后业务代码会有一部分实际引用runtime中的类
    // 如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
    pluginCompileOnly "com.tencent.shadow.core:runtime:$shadow_version"

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}


shadow {
    packagePlugin {
        pluginTypes {
            plugin2Debug {
                loaderApkConfig = new Tuple2('plugin-app-loader-debug.apk', ':plugin-app-loader:assembleDebug')
                runtimeApkConfig = new Tuple2('plugin-app-runtime-debug.apk', ':plugin-app-runtime:assembleDebug')

                pluginApks {
                    pluginApk1 {
                        partKey = 'plugin-demo2'
                        buildTask = ':plugin-app-demo2:assemblePluginDebug'
                        //这里因为单元测试时，会把项目根目录设置成case1的根目录
                        apkPath = 'plugin-app-demo2/build/outputs/apk/plugin/debug/plugin-app-demo2-plugin-debug.apk'
                    }
                }
            }
        }

        loaderApkProjectPath = 'plugin-app-loader'

        runtimeApkProjectPath = 'plugin-app-runtime'

        uuid = '1234567890'
        version = 4
        compactVersion = [1, 2, 3]
        uuidNickName = "1.1.5"
    }
}